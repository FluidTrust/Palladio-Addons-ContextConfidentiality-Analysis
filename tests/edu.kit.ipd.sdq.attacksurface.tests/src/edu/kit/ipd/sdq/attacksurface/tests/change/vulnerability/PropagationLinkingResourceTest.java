package edu.kit.ipd.sdq.attacksurface.tests.change.vulnerability;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.context.system.pcm.structure.StructureFactory;
import org.palladiosimulator.pcm.repository.BasicComponent;
import org.palladiosimulator.pcm.resourceenvironment.LinkingResource;
import org.palladiosimulator.pcm.seff.ResourceDemandingSEFF;

import edu.kit.ipd.sdq.attacksurface.tests.change.AbstractChangeTests;
//TODO
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.LinkingPropagationVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedLinkingResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;

public class PropagationLinkingResourceTest extends AbstractChangeTests {
    private void runLinkingAssemblyPropagation(final CredentialChange change) {
        final var wrapper = getBlackboardWrapper();
        final var assemblyChange = new LinkingPropagationVulnerability(wrapper, change);
        assemblyChange.calculateLinkingResourceToAssemblyContextPropagation();
    }

    private void runLinkingResourcePropagation(final CredentialChange change) {
        final var wrapper = getBlackboardWrapper();
        final var assemblyChange = new LinkingPropagationVulnerability(wrapper, change);
        assemblyChange.calculateLinkingResourceToResourcePropagation();
    }

    protected CompromisedLinkingResource createLinking(final CredentialChange change) {
        return this.createLinking(change, this.environment.getLinkingResources__ResourceEnvironment().get(0));
    }

    protected CompromisedLinkingResource createLinking(final CredentialChange change,
            final LinkingResource assemblyComponent) {
        final var infectedLinking = KAMP4attackModificationmarksFactory.eINSTANCE.createCompromisedLinkingResource();
        final var assemblyContext = assemblyComponent;
        infectedLinking.setAffectedElement(assemblyContext);
        change.getCompromisedlinkingresource().add(infectedLinking);
        return infectedLinking;
    }

    @BeforeEach
    void initXML() {
        generateXML();
    }

    //TODO tests
}
