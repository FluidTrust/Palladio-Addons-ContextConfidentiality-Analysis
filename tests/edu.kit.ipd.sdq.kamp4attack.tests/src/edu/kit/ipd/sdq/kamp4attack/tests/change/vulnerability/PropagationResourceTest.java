package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability;

import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.ResourceContainerPropagationVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

public class PropagationResourceTest extends AbstractChangeTests {
    private void runResourceLocalAssemblyPropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new ResourceContainerPropagationVulnerability(wrapper);
        assemblyChange.calculateResourceContainerToLocalAssemblyContextPropagation(change);
    }

    private void runResourceRemoteAssemblyPropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new ResourceContainerPropagationVulnerability(wrapper);
        assemblyChange.calculateResourceContainerToRemoteAssemblyContextPropagation(change);
    }

    private void runResourceLinkingPropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new ResourceContainerPropagationVulnerability(wrapper);
        assemblyChange.calculateResourceContainerToLinkingResourcePropagation(change);
    }

    private void runResourceResourcePropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new ResourceContainerPropagationVulnerability(wrapper);
        assemblyChange.calculateResourceContainerToResourcePropagation(change);
    }

    @Test
    void ResourceToLocalAssemblyPropagation() {
        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var compromisedResource = this.createResourceChange(change);

        this.runResourceLocalAssemblyPropagation(change);

        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0), compromisedResource));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0).getAffectedElement(),
                this.assembly.getAssemblyContexts__ComposedStructure().get(0)));
        assertTrue(change.isChanged());
    }

    @Test
    void ResourceToRemoteAssemblyPropagation() {
        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = this.createSimpleAttack();

        final var vulnerability = this.createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        final var compromisedResource = this.createResourceChange(change);

        final var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setAssemblycontext(this.assembly.getAssemblyContexts__ComposedStructure().get(2));
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        this.runResourceRemoteAssemblyPropagation(change);

        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0), compromisedResource));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0).getAffectedElement(),
                this.assembly.getAssemblyContexts__ComposedStructure().get(2)));
        assertTrue(change.isChanged());
    }

    @Test
    void ResourceToLinkingPropagation() {
        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = this.createSimpleAttack();

        final var vulnerability = this.createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        final var compromisedResource = this.createResourceChange(change);

        final var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setLinkingresource(this.environment.getLinkingResources__ResourceEnvironment().get(0));
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        this.runResourceLinkingPropagation(change);

        assertTrue(this.attacker.getAttackers().getAttacker().get(0).getCompromiseddata().isEmpty());
        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0), compromisedResource));
        assertEquals(1, change.getCompromisedlinkingresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedlinkingresource().get(0).getAffectedElement(),
                this.environment.getLinkingResources__ResourceEnvironment().get(0)));
        assertTrue(change.getCompromisedassembly().isEmpty());
        assertTrue(change.isChanged());
    }

    @Test
    void ResourceToResourcePropagation() {
        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        final var cweID = this.createSimpleAttack();

        final var vulnerability = this.createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        final var compromisedResource = this.createResourceChange(change);

        final var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setResourcecontainer(this.environment.getResourceContainer_ResourceEnvironment().get(2));
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        this.runResourceResourcePropagation(change);

        assertEquals(2, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0), compromisedResource));
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(1).getAffectedElement(),
                this.environment.getResourceContainer_ResourceEnvironment().get(2)));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertTrue(change.getCompromisedassembly().isEmpty());
        assertTrue(change.isChanged());
    }

}
