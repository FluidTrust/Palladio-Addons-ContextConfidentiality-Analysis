package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import static org.junit.Assert.fail;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.resourceenvironment.ResourceenvironmentFactory;

import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

public class ChainedTests extends AbstractChangeTests {
    public static final int WARMUP = 5;
    public static final int REPEAT = 5;
    public ChainedTests() {
        this.PATH_REPOSITORY = "travelplanner/default.repository";
        this.PATH_RESOURCES = "travelplanner/default.resourceenvironment";
        this.PATH_ASSEMBLY = "travelplanner/default.system";
        this.PATH_ALLOCATION = "travelplanner/default.allocation";
        this.PATH_ATTACKER = "travelplanner/Scalability/test_model.attacker";
        this.PATH_CONTEXT = "travelplanner/Scalability/test_model.context";
        this.PATH_MODIFICATION = "travelplanner/Scalability/test_model.kamp4attackmodificationmarks";
    }

    @Test
    void warmup() {
        runAnalysis();
    }

    @Disabled
    @Test
    void run() {

        for (var i = 0; i < WARMUP; i++) {
            runAnalysis();
        }

        for (var i = 1; i < 100; i++) {
            perform(this.environment, 100, this.attacker.getSystemintegration());

            var timeList = new ArrayList<Long>();

            for (var j = 0; j < REPEAT; j++) {
                timeList.add(analysisTime());
            }

            try (var output = Files.newBufferedWriter(Paths.get("/home/majuwa/chain.csv"),
                    StandardOpenOption.APPEND);) {

                output.append(String.format("%d,%d\n", i * 100,
                        Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));

            } catch (IOException e) {
                fail(e.getMessage());
            }
        }
    }

    long analysisTime() {
        var startTime = java.lang.System.currentTimeMillis();
        runAnalysis();
        return java.lang.System.currentTimeMillis() - startTime;
    }

    private void perform(ResourceEnvironment environment, int numberOfChains,
            AttackerSystemSpecificationContainer attacks) {
        var origin = environment.getResourceContainer_ResourceEnvironment().get(1);
        var vulnerability = VulnerabilityHelper.getVulnerabilities(attacks, origin);
        for (var i = 0; i < numberOfChains; i++) {

            var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
            integration.setVulnerability(vulnerability.get(0));

            origin = addChainedResource(environment, origin, integration);
        }

    }

    private ResourceContainer addChainedResource(ResourceEnvironment environment,
            ResourceContainer resourceContainerOrigin, SystemIntegration integration) {
        var resource = ResourceenvironmentFactory.eINSTANCE.createResourceContainer();
        var linking = ResourceenvironmentFactory.eINSTANCE.createLinkingResource();

        linking.getConnectedResourceContainers_LinkingResource().add(resourceContainerOrigin);
        linking.getConnectedResourceContainers_LinkingResource().add(resource);

        var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
        pcmElement.setResourcecontainer(resource);
        integration.setPcmelement(pcmElement);

        environment.getLinkingResources__ResourceEnvironment().add(linking);
        environment.getResourceContainer_ResourceEnvironment().add(resource);

        return resource;

    }

}
