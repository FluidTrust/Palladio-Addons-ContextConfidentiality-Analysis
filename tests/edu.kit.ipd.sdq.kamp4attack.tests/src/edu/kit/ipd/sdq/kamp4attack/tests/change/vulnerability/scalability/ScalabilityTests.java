package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability.scalability;

import static org.junit.Assert.fail;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.ArrayList;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.PcmFactory;
import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.allocation.AllocationFactory;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerSystemSpecificationContainer;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;
import org.palladiosimulator.pcm.core.composition.AssemblyConnector;
import org.palladiosimulator.pcm.core.composition.CompositionFactory;
import org.palladiosimulator.pcm.repository.OperationRequiredRole;
import org.palladiosimulator.pcm.repository.impl.RepositoryComponentImpl;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;
import org.palladiosimulator.pcm.resourceenvironment.ResourceEnvironment;
import org.palladiosimulator.pcm.system.System;

import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

public abstract class ScalabilityTests extends AbstractChangeTests {
	public static final int WARMUP = 0;
	public static final int REPEAT = 1;

	public ScalabilityTests() {
		this.PATH_REPOSITORY = "travelplanner/default.repository";
		this.PATH_RESOURCES = "travelplanner/default.resourceenvironment";
		this.PATH_ASSEMBLY = "travelplanner/default.system";
		this.PATH_ALLOCATION = "travelplanner/default.allocation";
		this.PATH_ATTACKER = "travelplanner/Scalability/test_model.attacker";
		this.PATH_CONTEXT = "travelplanner/Scalability/test_model.context";
		this.PATH_MODIFICATION = "travelplanner/Scalability/test_model.kamp4attackmodificationmarks";
	}

	@Disabled
	@Test
	void warmup() {
		runAnalysis();
	}

	@Disabled
	@Test
	void run() {

		for (var i = 0; i < WARMUP; i++) {
			runAnalysis();
		}

//        for (var i = 0; i < 1; i++) {
//            perform(this.environment, 1000, this.attacker.getSystemintegration());
//
//            var timeList = new ArrayList<Long>();
//
//            for (var j = 0; j < REPEAT; j++) {
//                timeList.add(analysisTime());
//            }
//
//            try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
//                    StandardOpenOption.APPEND);) {
//                var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
//                        .getChangePropagationSteps().get(0);
//                output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
//                        Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));
//
//            } catch (IOException e) {
//                fail(e.getMessage());
//            }
//
//        }
		
		perform(this.assembly, this.attacker, this.allocation,this.environment, 300, this.attacker.getSystemintegration());
		writeResults();
		
//		perform(this.environment, 300, this.attacker.getSystemintegration());
//		writeResults();
//        perform(this.environment, 90, this.attacker.getSystemintegration());
//        writeResults();
//        perform(this.environment, 900, this.attacker.getSystemintegration());
//        writeResults();
//        perform(this.environment, 9000, this.attacker.getSystemintegration());
//        writeResults();
//        perform(this.environment, 90000, this.attacker.getSystemintegration());
//        writeResults();
//        perform(this.environment, 900000, this.attacker.getSystemintegration());
//        writeResults();
	}

	private void writeResults() {
		var timeList = new ArrayList<Long>();

		for (var j = 0; j < REPEAT; j++) {
			timeList.add(analysisTime());
		}

//        try (var output = Files.newBufferedWriter(Paths.get(System.getProperty("java.io.tmpdir"), getFilename()),
//                StandardOpenOption.APPEND);) {
//            var credential = (CredentialChange) getBlackboardWrapper().getModificationMarkRepository()
//                    .getChangePropagationSteps().get(0);
//            output.append(String.format("%d,%d\n", credential.getCompromisedresource().size(),
//                    Math.round(timeList.stream().mapToLong(Long::longValue).average().getAsDouble())));
//
//        } catch (IOException e) {
//            fail(e.getMessage());
//        }
	}

	long analysisTime() {
		var startTime = java.lang.System.currentTimeMillis();
		runAnalysis();
		return java.lang.System.currentTimeMillis() - startTime;
	}

	private void perform(ResourceEnvironment environment, int numberAddition,
			AttackerSystemSpecificationContainer attacks) {
		var origin = environment.getResourceContainer_ResourceEnvironment().get(1);
		var vulnerability = VulnerabilityHelper.getVulnerabilities(attacks, origin);
		for (var i = 0; i < numberAddition; i++) {

			var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
			integration.setVulnerability(vulnerability.get(0));

			origin = resourceAddOperation(environment, origin, integration);
			attacks.getVulnerabilities().add(integration);
		}
	}

	private void perform(System assembly, AttackerSpecification attacker, Allocation allocation, ResourceEnvironment environment,
			int numberAddition, AttackerSystemSpecificationContainer attacks) {
		var originResource = environment.getResourceContainer_ResourceEnvironment().get(1);
		var vulnerability = VulnerabilityHelper.getVulnerabilities(attacks, originResource);

		var integration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
		integration.setVulnerability(vulnerability.get(0));

		originResource = resourceAddOperation(environment, originResource, integration);
		attacks.getVulnerabilities().add(integration);

		var originConnector = (AssemblyConnector) assembly.getConnectors__ComposedStructure().get(1);
		var originComponent = originConnector.getRequiringAssemblyContext_AssemblyConnector();
		
		//var originConnector = CompositionFactory.eINSTANCE.createAssemblyConnector();
				
		//(AssemblyConnector) assembly.getConnectors__ComposedStructure().get(1);
		// this.allocation.getAllocationContexts_Allocation()

		var pcmElementSystem = PcmIntegrationFactory.eINSTANCE.createSystemComponent();
		pcmElementSystem.getAssemblycontext().add(originComponent);
		attacker.getAttackers().getAttacker().get(0).getCompromisedComponents().add(pcmElementSystem);

		for (var i = 0; i < numberAddition; i++) {
			var component = CompositionFactory.eINSTANCE.createAssemblyContext();
			var connector = CompositionFactory.eINSTANCE.createAssemblyConnector();
			
			component.setEncapsulatedComponent__AssemblyContext(assembly.getAssemblyContexts__ComposedStructure().get(1).getEncapsulatedComponent__AssemblyContext());

//			connector.setProvidingAssemblyContext_AssemblyConnector(
//					originConnector.getRequiringAssemblyContext_AssemblyConnector());
//			connector.setRequiringAssemblyContext_AssemblyConnector(component);

			connector.setRequiringAssemblyContext_AssemblyConnector(originComponent);
			connector.setProvidingAssemblyContext_AssemblyConnector(component);
			
			connector.setProvidedRole_AssemblyConnector(originConnector.getProvidedRole_AssemblyConnector());

			var pcmElement = PcmIntegrationFactory.eINSTANCE.createPCMElement();
			pcmElement.getAssemblycontext().add(component);
			integration.setPcmelement(pcmElement);

			assembly.getAssemblyContexts__ComposedStructure().add(component);
			assembly.getConnectors__ComposedStructure().add(connector);
			
			var allocationContext = AllocationFactory.eINSTANCE.createAllocationContext();
			allocationContext.setResourceContainer_AllocationContext(originResource);
			allocationContext.setAssemblyContext_AllocationContext(component);
			allocationContext.setAllocation_AllocationContext(allocation);

			originComponent = component;
		}
	}

	protected abstract ResourceContainer resourceAddOperation(ResourceEnvironment environment, ResourceContainer origin,
			VulnerabilitySystemIntegration integration);

	protected abstract String getFilename();

}
