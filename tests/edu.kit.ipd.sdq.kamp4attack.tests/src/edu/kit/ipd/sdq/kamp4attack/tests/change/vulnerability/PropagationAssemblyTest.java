package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.allocation.AllocationContext;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackSpecificationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CVEID;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CWEAttack;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CWEID;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.CWEVulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.confidentiality.context.model.SingleAttributeContext;
import org.palladiosimulator.pcm.confidentiality.context.set.ContextSet;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.AssemblyContextPropagationContext;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.AssemblyContextPropagationVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;

class PropagationAssemblyTest extends AbstractChangeTests {

    private void contextChangePropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly,
            final SingleAttributeContext contextAccess) {
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertEquals(1, change.getContextchange().size());
        assertTrue(EcoreUtil.equals(change.getContextchange().get(0).getAffectedElement(), contextAccess));
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
    }

    private Optional<ResourceContainer> getResource(final CompromisedAssembly infectedAssembly) {
        final var resourceOpt = this.allocation.getAllocationContexts_Allocation().stream().filter(
                e -> EcoreUtil.equals(e.getAssemblyContext_AllocationContext(), infectedAssembly.getAffectedElement()))
                .map(AllocationContext::getResourceContainer_AllocationContext).findAny();
        if (resourceOpt.isEmpty()) {
            fail("Wrong Test Input");
        }
        return resourceOpt;
    }

    private void isContextPropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly,
            final SingleAttributeContext contextAccess) {
        this.contextChangePropagation(change, infectedAssembly, contextAccess);

        assertTrue(change.isChanged());

    }

    private void isNoAssemblyPropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly) {
        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertFalse(change.isChanged());
    }

    private void runAssemblyResourcePropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper);
        assemblyChange.calculateAssemblyContextToLocalResourcePropagation(change);
        assemblyChange.calculateAssemblyContextToRemoteResourcePropagation(change);
    }

    private void runAssemblyToContext(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationContext(wrapper);
        assemblyChange.calculateAssemblyContextToContextPropagation(change);
    }

    private CWEID createCWEID(int id) {
        var cweID = AttackSpecificationFactory.eINSTANCE.createCWEID();
        cweID.setCweID(id);
        return cweID;
    }

    private CWEID createCWEID(int id, CWEID parent) {
        var cweID = createCWEID(id);
        parent.getChildren().add(cweID);
        return cweID;
    }

    private CVEID createCVEID(int id) {
        var cweID = AttackSpecificationFactory.eINSTANCE.createCVEID();
        cweID.setCveID(id);
        return cweID;
    }

    private CWEAttack createCWEAttack(CWEID id) {
        var cweAttack = AttackSpecificationFactory.eINSTANCE.createCWEAttack();
        cweAttack.setCategory(id);
        return cweAttack;
    }

    private CWEVulnerability createCWEVulnerability(CWEID id, AttackVector vector, Privileges privileges,
            ConfidentialityImpact impact, boolean takeOver, ContextSet requiredCredentials,
            ContextSet gainedCredentials) {
        var vulnerability = AttackSpecificationFactory.eINSTANCE.createCWEVulnerability();
        vulnerability.setCweID(id);
        vulnerability.setAttackVector(vector);
        vulnerability.setPrivileges(privileges);
        vulnerability.setConfidentialityImpact(impact);
        vulnerability.setTakeOver(takeOver);
        if (requiredCredentials != null)
            vulnerability.setRequiredCredentials(requiredCredentials);
        if (gainedCredentials != null)
            vulnerability.getGainedPrivilege().add(gainedCredentials);
        return vulnerability;
    }

    @Test
    void testAssemblyToLocalResourcePropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createCWEID(1);
        var attack = createCWEAttack(cweID);

        this.attacker.getAttackers().getAttacker().get(0).getAttacks().add(attack);

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.LOCAL, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setResourcecontainer(this.getResource(infectedAssembly).get());
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        this.runAssemblyResourcePropagation(change);
        var date = this.attacker.getAttackers().getAttacker().get(0).getCompromiseddata();
        assertTrue(change.getCompromisedresource().size() == 1);
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0).getAffectedElement(), this.getResource(infectedAssembly).get()));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());
        
        
    }

}
