package edu.kit.ipd.sdq.kamp4attack.tests.change.vulnerability;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.Optional;

import org.eclipse.emf.ecore.util.EcoreUtil;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.allocation.AllocationContext;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;
import org.palladiosimulator.pcm.confidentiality.context.model.SingleAttributeContext;
import org.palladiosimulator.pcm.confidentiality.context.specification.assembly.AssemblyFactory;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.repository.BasicComponent;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.AssemblyContextPropagationContext;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.AssemblyContextPropagationVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.KAMP4attackModificationmarksFactory;
import edu.kit.ipd.sdq.kamp4attack.tests.change.AbstractChangeTests;
import factory.FluentRepositoryFactory;

class PropagationAssemblyTest extends AbstractChangeTests {

    private void contextChangePropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly,
            final SingleAttributeContext contextAccess) {
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertEquals(1, change.getContextchange().size());
        assertTrue(EcoreUtil.equals(change.getContextchange().get(0).getAffectedElement(), contextAccess));
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
    }

    private Optional<ResourceContainer> getResource(final CompromisedAssembly infectedAssembly) {
        return getResource(infectedAssembly.getAffectedElement());
    }

    private Optional<ResourceContainer> getResource(final AssemblyContext infectedAssembly) {
        final var resourceOpt = this.allocation.getAllocationContexts_Allocation().stream()
                .filter(e -> EcoreUtil.equals(e.getAssemblyContext_AllocationContext(), infectedAssembly))
                .map(AllocationContext::getResourceContainer_AllocationContext).findAny();
        if (resourceOpt.isEmpty()) {
            fail("Wrong Test Input");
        }
        return resourceOpt;
    }

    private void isContextPropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly,
            final SingleAttributeContext contextAccess) {
        this.contextChangePropagation(change, infectedAssembly, contextAccess);

        assertTrue(change.isChanged());

    }

    private void isNoAssemblyPropagation(final CredentialChange change, final CompromisedAssembly infectedAssembly) {
        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertFalse(change.isChanged());
    }

    private void runAssemblyResourcePropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper);
        assemblyChange.calculateAssemblyContextToLocalResourcePropagation(change);
        assemblyChange.calculateAssemblyContextToRemoteResourcePropagation(change);
    }

    private void runAssemblyAssemblyPropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper);
        assemblyChange.calculateAssemblyContextToAssemblyContextPropagation(change);
    }
    
    private void runAssemblyLinkingPropagation(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationVulnerability(wrapper);
        assemblyChange.calculateAssemblyContextToLinkingResourcePropagation(change);
    }

    private void runAssemblyToContext(final CredentialChange change) {
        final var wrapper = this.getBlackboardWrapper();
        final var assemblyChange = new AssemblyContextPropagationContext(wrapper);
        assemblyChange.calculateAssemblyContextToContextPropagation(change);
    }



    @Test
    void testAssemblyToLocalResourcePropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.LOCAL, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setResourcecontainer(this.getResource(infectedAssembly).get());
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);

        this.runAssemblyResourcePropagation(change);
        var date = this.attacker.getAttackers().getAttacker().get(0).getCompromiseddata(); // TODO
                                                                                           // consider
                                                                                           // Data
        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0).getAffectedElement(),
                this.getResource(infectedAssembly).get()));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());

    }


    // TODO special cases

    @Test
    void testAssemblyToRemoteResourcePropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration
                .setResourcecontainer(this.getResource(assembly.getAssemblyContexts__ComposedStructure().get(2)).get());
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        this.runAssemblyResourcePropagation(change);

        assertEquals(1, change.getCompromisedresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedresource().get(0).getAffectedElement(),
                this.getResource(assembly.getAssemblyContexts__ComposedStructure().get(2)).get()));
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());
    }

    @Test
    void testAssemblyToAssemblyPropagation() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setAssemblycontext(assembly.getAssemblyContexts__ComposedStructure().get(2));
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        this.runAssemblyAssemblyPropagation(change);

        
        var data = attacker.getAttackers().getAttacker().get(0).getCompromiseddata();
        
        
        
        
        assertFalse(data.isEmpty());
//        var create = new FluentRepositoryFactory();
//        var repo = create.newRepository().withImportedResource(PATH_REPOSITORY);
//        var dataType = create.fetchOfDataType("User");
        
        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(2, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(1).getAffectedElement(),
                assembly.getAssemblyContexts__ComposedStructure().get(2)));
        assertTrue(change.isChanged());
    }

    @Test
    void testAssemblyToAssemblyPropagationUsingSeff() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change, this.assembly.getAssemblyContexts__ComposedStructure().get(2));

        var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        var methodSpecification = AssemblyFactory.eINSTANCE.createMethodSpecification();
        var signature = ((BasicComponent) assembly.getAssemblyContexts__ComposedStructure().get(2)
                .getEncapsulatedComponent__AssemblyContext()).getServiceEffectSpecifications__BasicComponent().get(0)
                        .getDescribedService__SEFF();
        var connector = assembly.getConnectors__ComposedStructure().get(1);
        methodSpecification.setConnector(connector);
        methodSpecification.setSignature(signature);

        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setMethodspecification(methodSpecification);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        this.runAssemblyAssemblyPropagation(change);

        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(2, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(1).getAffectedElement(),
                assembly.getAssemblyContexts__ComposedStructure().get(0)));
        assertTrue(change.isChanged());
    }
    
    @Test
    void testAssemblyToLinkingResource() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.NETWORK, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        var linking = this.environment.getLinkingResources__ResourceEnvironment().get(0);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setLinkingresource(linking);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        this.runAssemblyLinkingPropagation(change);

        assertTrue(attacker.getAttackers().getAttacker().get(0).getCompromiseddata().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertEquals(1, change.getCompromisedlinkingresource().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedlinkingresource().get(0).getAffectedElement(), linking));
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertTrue(change.isChanged());
    }
    
    @Test
    void testAssemblyToLinkingResourceOnlyLocal() {

        final var change = KAMP4attackModificationmarksFactory.eINSTANCE.createCredentialChange();

        var cweID = createSimpleAttack();

        final var infectedAssembly = this.createAssembly(change);

        var vulnerability = createCWEVulnerability(cweID, AttackVector.LOCAL, Privileges.NONE,
                ConfidentialityImpact.HIGH, true, null, null);

        var linking = this.environment.getLinkingResources__ResourceEnvironment().get(0);
        var integration = PcmIntegrationFactory.eINSTANCE.createSystemIntegration();
        integration.setVulnerability(vulnerability);
        integration.setLinkingresource(linking);
        this.attacker.getSystemintegration().getVulnerabilities().add(integration);
        this.runAssemblyLinkingPropagation(change);
        
        assertTrue(attacker.getAttackers().getAttacker().get(0).getCompromiseddata().isEmpty());
        assertTrue(change.getCompromisedresource().isEmpty());
        assertTrue(change.getCompromisedlinkingresource().isEmpty());
        assertEquals(1, change.getCompromisedassembly().size());
        assertTrue(EcoreUtil.equals(change.getCompromisedassembly().get(0), infectedAssembly));
        assertFalse(change.isChanged());
    }

}
