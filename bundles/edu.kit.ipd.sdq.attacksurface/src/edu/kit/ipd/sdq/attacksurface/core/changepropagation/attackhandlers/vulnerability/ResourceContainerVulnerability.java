package edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;
import java.util.Set;
import java.util.function.Function;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.core.entity.Entity;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import de.uka.ipd.sdq.identifier.Identifier;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.changes.CauseGetter;
import edu.kit.ipd.sdq.attacksurface.graph.AttackGraph;
import edu.kit.ipd.sdq.attacksurface.graph.AttackStatusNodeContent;
import edu.kit.ipd.sdq.attacksurface.graph.CredentialsVulnearbilitiesSurface;
import edu.kit.ipd.sdq.attacksurface.graph.VulnerabilitySurface;
import edu.kit.ipd.sdq.kamp4attack.core.api.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

/**
 * Represents an attack handler for resource container attacks with vulnerabilities.
 * 
 * @author ugnwq
 * @version 1.0
 */
public class ResourceContainerVulnerability extends ResourceContainerHandler {

    private final AttackVector attackVector;

    public ResourceContainerVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
            final AttackVector attackVector, final AttackGraph attackGraph) {
        super(modelStorage, dataHandler, attackGraph);
        this.attackVector = attackVector;
    }

    @Override
    protected Optional<CompromisedResource> attackResourceContainer(final ResourceContainer container,
            final CredentialChange change, final Entity source) {
        final var credentials = this.getAllCredentials(new AttackStatusNodeContent(source),
                new AttackStatusNodeContent(container));
        final var attacks = this.getAttacks();
        final var vulnerabilityList = VulnerabilityHelper
                .getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), container);

        final var vulnerability = this.checkVulnerability(container, change, credentials, attacks, vulnerabilityList,
                this.attackVector);
        final var handling = new VulnerabilityHandlingResource(this.getDataHandler(),
                this.getModelStorage().getAllocation());
        return handling.executeVulnerabilityHandling(container, change, source, vulnerability,
                this.getAttackGraph().findNode(new AttackStatusNodeContent(source)),
                this.getAttackGraph().findNode(new AttackStatusNodeContent(container)), getAttackGraph());
    }

    @Override
    protected Set<Identifier> getCauses(EList<EObject> causingElements) {
        return CauseGetter.getCauses(causingElements, Vulnerability.class);
    }

    @Override
    protected Function<Identifier, CredentialsVulnearbilitiesSurface> getSurfaceMapper() {
        return VulnerabilitySurface::new;
    }

}
