package edu.kit.ipd.sdq.attacksurface.core.changepropagation.changes;

import java.util.List;

import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.CollectionHelper;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.entity.Entity;
import org.palladiosimulator.pcm.resourceenvironment.LinkingResource;

import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.vulnerability.AssemblyContextVulnerability;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.vulnerability.LinkingResourceVulnerability;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.vulnerability.MethodVulnerability;
import edu.kit.ipd.sdq.attacksurface.core.changepropagation.attackhandlers.vulnerability.ResourceContainerVulnerability;
import edu.kit.ipd.sdq.attacksurface.graph.AttackGraph;
import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class LinkingPropagationVulnerability extends LinkingChange {

    public LinkingPropagationVulnerability(final BlackboardWrapper v, CredentialChange change, final AttackGraph attackGraph) {
        super(v, change, attackGraph);
    }

    @Override
    public void calculateLinkingResourceToContextPropagation() {
        super.calculateLinkingResourceToContextPropagation();
        final var linkingResources = getCompromisedLinkingResources();
        final var linkingHandler = new LinkingResourceVulnerability(this.modelStorage,
                new DataHandlerAttacker(this.changes), AttackVector.LOCAL, getAttackGraph());
        for (final var linking : linkingResources) {
            linkingHandler.attackLinkingResource(List.of(linking), this.changes, linking);
        }

    }

    @Override
    protected ResourceContainerHandler getResourceContainerHandler() {
        return new ResourceContainerVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK, getAttackGraph());
    }

    @Override
    protected AssemblyContextHandler getAssemblyContextHandler() {
        return new AssemblyContextVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK, getAttackGraph());
    }

    @Override
    protected void handleSeff(final CredentialChange change, final List<AssemblyContext> components,
            final LinkingResource source) {
        final var listSpecification = CollectionHelper.getProvidedRestrictions(components);
        final var handler = new MethodVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK, getAttackGraph());
        handler.attackService(listSpecification, change, source);

    }


}
