package edu.kit.ipd.sdq.attacksurface.core.changepropagation.changes;

import java.util.List;

import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.CollectionHelper;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.entity.Entity;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.attacksurface.attackdag.AttackDAG;
import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.LinkingResourceHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.AssemblyContextVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.LinkingResourceVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.MethodVulnerability;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability.ResourceContainerVulnerability;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class ResourceContainerPropagationVulnerability extends ResourceContainerChange 
    implements LastCauseVulnerabilityGetter {

    public ResourceContainerPropagationVulnerability(final BlackboardWrapper v, final CredentialChange change, 
            final AttackDAG attackDAG) {
        super(v, change, attackDAG);
    }

    @Override
    public void calculateResourceContainerToContextPropagation() {
        super.calculateResourceContainerToContextPropagation();
        //TODO adapt
        /*
        final var resources = getInfectedResourceContainers();
        for (final var resource : resources) {
            final var handler = new ResourceContainerVulnerability(this.modelStorage,
                    new DataHandlerAttacker(this.changes), AttackVector.LOCAL);
            handler.attackResourceContainer(List.of(resource), this.changes, resource);
        }*/
    }

    @Override
    protected LinkingResourceHandler getLinkingHandler() {
        return new LinkingResourceVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected ResourceContainerHandler getResourceHandler() {
        return new ResourceContainerVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected AssemblyContextHandler getAssemblyHandler() {
        return new AssemblyContextVulnerability(this.modelStorage, new DataHandlerAttacker(this.changes),
                AttackVector.ADJACENT_NETWORK);
    }

    @Override
    protected void handleSeff(final CredentialChange changes, final List<AssemblyContext> components,
            final ResourceContainer source) {
        final var listSpecification = CollectionHelper.getProvidedRestrictions(components);
        final var handler = new MethodVulnerability(this.modelStorage, new DataHandlerAttacker(changes),
                AttackVector.ADJACENT_NETWORK);
        handler.attackService(listSpecification, changes, source);
    }

    @Override
    public String getLastCauseId(Entity affectedElement) {
        return LastCauseVulnerabilityGetter.super.getLastCauseId(affectedElement);
    }

}
