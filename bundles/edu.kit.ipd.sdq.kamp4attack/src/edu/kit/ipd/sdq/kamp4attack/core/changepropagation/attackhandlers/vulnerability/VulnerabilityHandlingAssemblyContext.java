package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.Datahandler;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.HelperCreationCompromisedElements;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;

public class VulnerabilityHandlingAssemblyContext extends VulnerabilityHandling<CompromisedAssembly>{
    
    
    private DataHandlerAttacker dataHandler;

    public VulnerabilityHandlingAssemblyContext(DataHandlerAttacker dataHandler) {
        this.dataHandler = dataHandler;
    }
    
    
    @Override
    protected Optional<CompromisedAssembly> handleTakeOver(EObject container, EObject source,
            Vulnerability vulnerability) {
        if (container instanceof AssemblyContext) {
            var component = HelperCreationCompromisedElements.createCompromisedAssembly((AssemblyContext) container,
                    List.of(source, vulnerability));
            return Optional.of(component);
        }
        throw new IllegalStateException("Wrong datatype" + this);
    }

    @Override
    protected void handleConfidentiality(EObject container) {
        if (container instanceof AssemblyContext) {
            var data = Datahandler.getData(((AssemblyContext) container).getEncapsulatedComponent__AssemblyContext());
            dataHandler.addData(data);
        }
        throw new IllegalStateException("Wrong datatype" + this);
        
    }

}
