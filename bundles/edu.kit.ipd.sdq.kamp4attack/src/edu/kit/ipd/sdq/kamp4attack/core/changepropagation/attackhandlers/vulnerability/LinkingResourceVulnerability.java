package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.context.helper.PolicyHelper;
import org.palladiosimulator.pcm.resourceenvironment.LinkingResource;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.LinkingResourceHandler;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedLinkingResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class LinkingResourceVulnerability extends LinkingResourceHandler {

    private final AttackVector attackVector;

    public LinkingResourceVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
            final AttackVector attackVector) {
        super(modelStorage, dataHandler);
        this.attackVector = attackVector;
    }

    @Override
    protected Optional<CompromisedLinkingResource> attackLinkingResource(final LinkingResource linking,
            final CredentialChange change, final EObject source) {
        var credentials = this.getCredentials(change);
        final var attacks = this.getAttacks();
        final var vulnerabilityList = VulnerabilityHelper
                .getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), linking);
        final var policies = PolicyHelper.getPolicy(this.getModelStorage().getSpecification(), linking);
        credentials = this.addCredentialsLocal(this.attackVector, credentials, policies);
        final var vulnerability = VulnerabilityHelper.checkAttack(credentials, policies, vulnerabilityList, attacks,
                this.attackVector);
        final var handling = new VulnerabilityHandlingLinkingResource();
        return handling.executeVulnerabilityHandling(linking, change, source, vulnerability);
    }

}
