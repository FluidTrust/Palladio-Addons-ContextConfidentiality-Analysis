package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.confidentiality.context.helper.PolicyHelper;
import org.palladiosimulator.pcm.confidentiality.context.specification.assembly.ProvidedRestriction;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.MethodHandler;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class MethodVulnerability extends MethodHandler {

    private final AttackVector attackVector;

    public MethodVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
            final AttackVector attackVector) {
        super(modelStorage, dataHandler);
        this.attackVector = attackVector;
    }

    @Override
    protected Optional<CompromisedAssembly> attackComponent(final ProvidedRestriction restriction,
            final CredentialChange change, final EObject source) {
        final var credentials = this.getCredentials(change);
        final var attacks = this.getAttacks();

        final var listMethodSpecification = this.getModelStorage().getVulnerabilitySpecification().getVulnerabilities()
                .stream().filter(e -> e.getMethodspecification() != null).map(SystemIntegration::getMethodspecification)
                .filter(ProvidedRestriction.class::isInstance).map(ProvidedRestriction.class::cast)
                .filter(e -> EcoreUtil.equals(e.getProvidedrole(), restriction.getProvidedrole())
                        && EcoreUtil.equals(e.getAssemblycontext(), restriction.getAssemblycontext()))
                .collect(Collectors.toList());

        for (final var method : listMethodSpecification) {
            final var policies = PolicyHelper.getPolicy(this.getModelStorage().getSpecification(), method);
            final var vulnerabilityList = VulnerabilityHelper
                    .getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), method);
            final var vulnerability = VulnerabilityHelper.checkAttack(credentials, policies, vulnerabilityList, attacks,
                    this.attackVector);
            final var seffHandling = new VulnerabilityHandlingSEFF(restriction.getAssemblycontext(),
                    this.getDataHandler());
            final var tmpReturnValue = seffHandling.executeVulnerabilityHandling(method, change, source, vulnerability);
            if (tmpReturnValue.isPresent()) {
                return tmpReturnValue;
            }
        }
        return Optional.empty();

    }

}
