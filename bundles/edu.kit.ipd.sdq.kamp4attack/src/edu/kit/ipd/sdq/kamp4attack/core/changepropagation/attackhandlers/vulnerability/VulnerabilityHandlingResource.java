package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.allocation.Allocation;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandler;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.HelperCreationCompromisedElements;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedResource;

class VulnerabilityHandlingResource extends VulnerabilityHandling<CompromisedResource> {

    private DataHandlerAttacker dataHandler;
    private Allocation allocation;

    public VulnerabilityHandlingResource(DataHandlerAttacker dataHandler, Allocation allocation) {
        this.dataHandler = dataHandler;
        this.allocation = allocation;
    }

    @Override
    protected Optional<CompromisedResource> handleTakeOver(EObject container, EObject source,
            Vulnerability vulnerability) {
        if (container instanceof ResourceContainer) {
            var resource = HelperCreationCompromisedElements.createCompromisedResource((ResourceContainer) container,
                    List.of(source, vulnerability));
            return Optional.of(resource);
        }
        throw new IllegalStateException("Wrong datatype" + this);

    }

    @Override
    protected void handleConfidentiality(EObject container) {
        if (container instanceof ResourceContainer) {
            var data = DataHandler.getData((ResourceContainer) container, this.allocation);
            dataHandler.addData(data);
        }
        throw new IllegalStateException("Wrong datatype" + this);

    }

}
