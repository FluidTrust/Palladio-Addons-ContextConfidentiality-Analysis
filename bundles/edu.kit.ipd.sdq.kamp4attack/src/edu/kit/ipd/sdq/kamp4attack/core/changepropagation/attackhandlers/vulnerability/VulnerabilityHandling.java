package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.changes.HelperUpdateCredentialChange;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

abstract class VulnerabilityHandling<T> {

    public Optional<T> executeVulnerabilityHandling(EObject element, CredentialChange change,
            EObject source, Vulnerability vulnerability) {
        if (vulnerability == null)
            return Optional.empty();
        if (!vulnerability.getGainedPrivilege().isEmpty()) {
            var streamCredentials = vulnerability.getGainedPrivilege().stream()
                    .flatMap(set -> set.getContexts().stream()).map(credential -> HelperUpdateCredentialChange
                            .createContextChange(credential, List.of(element, vulnerability)));
            HelperUpdateCredentialChange.updateCredentials(change, streamCredentials);
        }
        if (vulnerability.isTakeOver()) {
            return handleTakeOver(element, source, vulnerability);

        } else if (vulnerability.getConfidentialityImpact() != ConfidentialityImpact.NONE) {
            handleConfidentiality(element);
        }
        return Optional.empty();
    }

    protected abstract Optional<T> handleTakeOver(EObject container, EObject source,
            Vulnerability vulnerability);

    protected abstract void handleConfidentiality(EObject container);

}
