package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AssemblyContextDetail;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class AssemblyContextVulnerability extends AssemblyContextHandler {

	private final AttackVector attackVector;

	public AssemblyContextVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
			final AttackVector attackVector) {
		super(modelStorage, dataHandler);
		this.attackVector = attackVector;
	}

	@Override
	protected Optional<CompromisedAssembly> attackComponent(final AssemblyContextDetail componentDetail,
			final CredentialChange change, final EObject source) {

		for (AssemblyContext component : componentDetail.getAssemblyList()) {
			final var credentials = this.getCredentials(change);
			final var attacks = this.getAttacks();

			final var vulnerabilityList = VulnerabilityHelper
					.getVulnerabilities(this.getModelStorage().getVulnerabilitySpecification(), component);

			final var vulnerability = this.checkVulnerability(component, change, credentials, attacks,
					vulnerabilityList, this.attackVector);
			final var handling = new VulnerabilityHandlingAssemblyContext(this.getDataHandler());
			return handling.executeVulnerabilityHandling(component, change, source, vulnerability);
		}
		return Optional.empty();
	}

}
