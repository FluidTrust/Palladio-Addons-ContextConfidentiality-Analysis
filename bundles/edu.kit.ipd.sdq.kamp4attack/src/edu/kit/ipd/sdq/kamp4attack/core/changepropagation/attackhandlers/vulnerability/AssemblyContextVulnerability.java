package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;

import edu.kit.ipd.sdq.kamp4attack.core.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.AssemblyContextHandler;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class AssemblyContextVulnerability extends AssemblyContextHandler {

    private final AttackVector attackVector;

    public AssemblyContextVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
            final AttackVector attackVector) {
        super(modelStorage, dataHandler);
        this.attackVector = attackVector;
    }

    @Override
    protected Optional<CompromisedAssembly> attackComponent(final AssemblyContext component,
            final CredentialChange change, final EObject source) {
        var credentials = getCredentials(change);
        final var attacks = getAttacks();

        final var vulnerabilityList = VulnerabilityHelper
                .getVulnerabilities(getModelStorage().getVulnerabilitySpecification(), component);

        final var vulnerability = checkVulnerability(component, change, credentials, attacks, vulnerabilityList,
                this.attackVector);
        final var handling = new VulnerabilityHandlingAssemblyContext(getDataHandler());
        return handling.executeVulnerabilityHandling(component, change, source, vulnerability);

    }

}
