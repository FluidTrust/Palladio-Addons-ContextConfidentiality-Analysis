package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attacker.helper.VulnerabilityHelper;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

import edu.kit.ipd.sdq.kamp4attack.core.api.BlackboardWrapper;
import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.ResourceContainerHandler;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedResource;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CredentialChange;

public class ResourceContainerVulnerability extends ResourceContainerHandler {

    private final AttackVector attackVector;

    public ResourceContainerVulnerability(final BlackboardWrapper modelStorage, final DataHandlerAttacker dataHandler,
            final AttackVector attackVector) {
        super(modelStorage, dataHandler);
        this.attackVector = attackVector;
    }

    @Override
    protected Optional<CompromisedResource> attackResourceContainer(final ResourceContainer container,
            final CredentialChange change, final EObject source) {
        final var credentials = this.getCredentials(change);
        final var attacks = this.getAttacks();
        final var vulnerabilityList = VulnerabilityHelper.getVulnerabilities(this.getModelStorage()
            .getVulnerabilitySpecification(), container);

        final var vulnerability = this.checkVulnerability(container, change, credentials, attacks, vulnerabilityList,
                this.attackVector);
        final var handling = new VulnerabilityHandlingResource(this.getDataHandler(), this.getModelStorage()
            .getAllocation());
        return handling.executeVulnerabilityHandling(container, change, source, vulnerability);
    }

}
