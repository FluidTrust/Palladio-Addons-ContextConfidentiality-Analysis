package edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.vulnerability;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandler;
import org.palladiosimulator.pcm.confidentiality.attacker.analysis.common.data.DataHandlerAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.confidentiality.context.specification.assembly.MethodSpecification;
import org.palladiosimulator.pcm.core.composition.AssemblyConnector;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.core.composition.Connector;
import org.palladiosimulator.pcm.core.composition.ProvidedDelegationConnector;
import org.palladiosimulator.pcm.core.composition.RequiredDelegationConnector;
import org.palladiosimulator.pcm.repository.BasicComponent;
import org.palladiosimulator.pcm.repository.Signature;
import org.palladiosimulator.pcm.seff.ResourceDemandingSEFF;
import org.palladiosimulator.pcm.seff.ServiceEffectSpecification;

import edu.kit.ipd.sdq.kamp4attack.core.changepropagation.attackhandlers.HelperCreationCompromisedElements;
import edu.kit.ipd.sdq.kamp4attack.model.modificationmarks.KAMP4attackModificationmarks.CompromisedAssembly;

public class VulnerabilityHandlingSEFF extends VulnerabilityHandling<CompromisedAssembly> {

    private final AssemblyContext assemblyContext;
    private final DataHandlerAttacker dataHandler;

    public VulnerabilityHandlingSEFF(final AssemblyContext assemblyContext, final DataHandlerAttacker dataHandler) {
        this.assemblyContext = assemblyContext;
        this.dataHandler = dataHandler;
    }

    @Override
    protected Optional<CompromisedAssembly> handleTakeOver(final EObject container, final EObject source,
            final Vulnerability vulnerability) {
        if (container instanceof MethodSpecification) {
            final var specification = (MethodSpecification) container;

            if (!this.checkConnector(specification.getConnector())) {
                throw new IllegalStateException("Missmatch Connector and AssemblyContext");
            }

            if (specification.getConnector() instanceof AssemblyConnector && EcoreUtil.equals(
                    ((AssemblyConnector) specification.getConnector()).getRequiringAssemblyContext_AssemblyConnector(),
                    this.assemblyContext)) {
                return Optional.empty();

            }
            final var resource = HelperCreationCompromisedElements.createCompromisedAssembly(this.assemblyContext,
                    List.of(source, vulnerability));
            return Optional.of(resource);
        }
        throw new IllegalStateException("Wrong datatype " + this);
    }

    @Override
    protected void handleConfidentiality(final EObject container) {
        if (container instanceof MethodSpecification) {
            final var specification = (MethodSpecification) container;
            final var seff = this.getSEFF(specification.getSignature(), this.assemblyContext);
            if (seff instanceof ResourceDemandingSEFF) {
                this.dataHandler.addData(DataHandler.getData((ResourceDemandingSEFF) seff));
            }
            return;
        }
        throw new IllegalStateException("Wrong datatype " + this);
    }

    private ServiceEffectSpecification getSEFF(final Signature sig, final AssemblyContext ac) {
        final BasicComponent bc = (BasicComponent) ac.getEncapsulatedComponent__AssemblyContext();
        final EList<ServiceEffectSpecification> seffList = bc.getServiceEffectSpecifications__BasicComponent();
        for (final ServiceEffectSpecification seff : seffList) {
            if (seff.getDescribedService__SEFF().getEntityName().equals(sig.getEntityName())) {
                return seff;
            }
        }
        return null;
    }

    private boolean checkConnector(final Connector connector) {
        boolean returnValue = false;
        if (connector instanceof ProvidedDelegationConnector) {
            returnValue = EcoreUtil.equals(
                    ((ProvidedDelegationConnector) connector).getAssemblyContext_ProvidedDelegationConnector(),
                    this.assemblyContext);
        } else if (connector instanceof RequiredDelegationConnector) {
            returnValue = EcoreUtil.equals(
                    ((RequiredDelegationConnector) connector).getAssemblyContext_RequiredDelegationConnector(),
                    this.assemblyContext);
        } else if (connector instanceof AssemblyConnector) {
            returnValue = EcoreUtil.equals(
                    ((AssemblyConnector) connector).getProvidingAssemblyContext_AssemblyConnector(),
                    this.assemblyContext);
            returnValue = returnValue
                    || EcoreUtil.equals(((AssemblyConnector) connector).getRequiringAssemblyContext_AssemblyConnector(),
                            this.assemblyContext);
        }

        return returnValue;
    }

}
